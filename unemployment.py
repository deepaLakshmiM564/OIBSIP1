# -*- coding: utf-8 -*-
"""unemployment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QBkWgXFEiyM5zUv9nopTY9mnVPyVQJQC
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
file_path = "/content/Unemployment in India (1).csv"
data = pd.read_csv(file_path)

data.columns = data.columns.str.strip()

data = data.dropna()

data['Date'] = pd.to_datetime(data['Date'], errors='coerce')

data = data.dropna(subset=['Date'])

data_encoded = pd.get_dummies(data, columns=['Region', 'Area'], drop_first=True)

features = ['Estimated Labour Participation Rate (%)'] + [col for col in data_encoded.columns if col.startswith(('Region_', 'Area_'))]
X = data_encoded[features]
y = data_encoded['Estimated Unemployment Rate (%)']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Random Forest model
model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error: {mse}")
print(f"RÂ² Score: {r2}")

# 1. Unemployment Rate Distribution
plt.figure(figsize=(10, 6))
sns.histplot(y, kde=True, color='skyblue')
plt.title('Distribution of Unemployment Rates')
plt.xlabel('Unemployment Rate (%)')
plt.ylabel('Frequency')
plt.show()

# 2. Feature Importance
feature_importances = model.feature_importances_
feature_names = features
plt.figure(figsize=(10, 6))
plt.barh(feature_names, feature_importances, color='teal')
plt.title('Feature Importance')
plt.xlabel('Importance')
plt.ylabel('Feature')
plt.show()

# 3. Actual vs Predicted Unemployment Rate
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='green', alpha=0.6)
plt.plot([y.min(), y.max()], [y.min(), y.max()], color='red', lw=2, linestyle='--')
plt.title('Actual vs Predicted Unemployment Rate')
plt.xlabel('Actual Unemployment Rate (%)')
plt.ylabel('Predicted Unemployment Rate (%)')
plt.show()

# 4. Time Series Plot of Unemployment Rate
plt.figure(figsize=(10, 6))
plt.plot(data['Date'], data['Estimated Unemployment Rate (%)'], color='blue')
plt.title('Unemployment Rate Over Time')
plt.xlabel('Date')
plt.ylabel('Unemployment Rate (%)')
plt.xticks(rotation=45)
plt.show()

# 5. Residual Plot
residuals = y_test - y_pred
plt.figure(figsize=(10, 6))
sns.residplot(x=y_pred, y=residuals, lowess=True, line_kws={'color': 'red', 'lw': 2})
plt.title('Residual Plot')
plt.xlabel('Predicted Unemployment Rate (%)')
plt.ylabel('Residuals')
plt.show()

# 6. Predicted vs Actual Scatter Plot
plt.figure(figsize=(10, 6))
sns.scatterplot(x=y_test, y=y_pred, color='purple', alpha=0.6)
plt.plot([y.min(), y.max()], [y.min(), y.max()], color='red', lw=2, linestyle='--')
plt.title('Predicted vs Actual Unemployment Rate')
plt.xlabel('Actual Unemployment Rate (%)')
plt.ylabel('Predicted Unemployment Rate (%)')
plt.show()

labour_participation_rate = float(input("Enter the labour participation rate (%): "))
region = input("Enter the region: ")
area = input("Enter the area: ")

region_encoded = pd.get_dummies([region], prefix='Region').reindex(columns=[col for col in data_encoded.columns if col.startswith('Region_')], fill_value=0)
area_encoded = pd.get_dummies([area], prefix='Area').reindex(columns=[col for col in data_encoded.columns if col.startswith('Area_')], fill_value=0)

input_data = pd.DataFrame([[labour_participation_rate] + region_encoded.values[0].tolist() + area_encoded.values[0].tolist()],
                          columns=features)

predicted_rate = model.predict(input_data)
print(f"Predicted Unemployment Rate: {predicted_rate[0]:.2f}%")